
import common ;
import os ;
import string ;
import feature ;
import modules ;
import "class" : new ;
import property-set ;

if [ option.get openbus-with-puts : : 1 ]
{
  local scs-idl-path-env = [ os.environ SCS_IDL_PATH ] ;
  local scs-path-env = [ os.environ SCS_PATH ] ;
  local openssl-lib-path-env = [ os.environ OPENSSL_LIB_PATH ] ;
  local openssl-include-path-env = [ os.environ OPENSSL_INCLUDE_PATH ] ;
  local logger-path-env = [ os.environ LOGGER_PATH ] ;
  local openbus-idl-path-env = [ os.environ OPENBUS_IDL_PATH ] ;

  path-constant scs-path : $(scs-path-env) ;
  path-constant openssl-lib-path : $(openssl-lib-path-env) ;
  path-constant openssl-include-path : $(openssl-include-path-env) ;
  path-constant openbus-idl-path : $(openbus-idl-path-env) ;
  path-constant scs-idl-path : $(scs-idl-path-env) ;

  use-project scs : $(scs-path) ;
  use-project logger : $(logger-path-env) ;

  local search_path = [ modules.peek : BOOST_BUILD_PATH ] ;
  search_path += $(scs-path) ;
  modules.poke : BOOST_BUILD_PATH : $(search_path) ;

  project openssl ;

  lib crypto : : <name>crypto <search>$(openssl-lib-path)
   ;

  lib openssl : crypto : <name>ssl <search>$(openssl-lib-path)
   : : <include>$(openssl-include-path)
   ;
}
else
{
  path-constant scs-idl-path : [ scs-idl-path ] ;
  path-constant openbus-idl-path : [ openbus-idl-path ] ;
}

import mico-idl ;

project dl ;
lib dl : : <name>dl <link>shared ;

project openbus : build-dir bin
 : requirements <tag>@tag
 : default-build <threading>multi <variant>debug <link>shared
 ;

path-constant here : . ;

local rule core-idl-obj ( name )
{
  obj $(name).obj : $(openbus-idl-path)/$(name).idl
    /scs//idls
   : <include>$(openbus-idl-path) <implicit-dependency>/scs//idls
   : : <include>$(openbus-idl-path)
  ;
  explicit $(name).obj ;
}

core-idl-obj access_control ;
core-idl-obj core ;
core-idl-obj credential ;
core-idl-obj offer_registry ;

obj credential_v1_5.obj : $(here)/legacy/idl/credential_v1_5.idl
 /scs//idls
 : <include>$(openbus-idl-path) <implicit-dependency>/scs//idls
 : : <include>$(openbus-idl-path)
 ;
explicit credential_v1_5.obj ;

alias core-idls : access_control.obj core.obj credential.obj
 offer_registry.obj credential_v1_5.obj ;
explicit core-idls ;

rule tag ( name : type ? : property-set )
{
  if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB EXE
  {
    local result ;
    local debug ;
    local static ;
    if <link>static in [ $(property-set).raw ]
    {
      static = -s ;
    }
    if <variant>debug in [ $(property-set).raw ]
    {
      debug = -d ;
    }
    if <threading>multi in [ $(property-set).raw ]
    {
      result = [ common.format-name <base> -mico
        -mt $(static) $(debug) : $(name) : $(type) : $(property-set) ] ;
    }
    else
    {
      result = [ common.format-name <base> -mico
        $(static) $(debug) : $(name) : $(type) : $(property-set) ] ;
    }
    return $(result) ;
  }
}

lib openbus : src/Connection.cpp src/OpenBusContext.cpp
 src/Connection_impl.cpp src/ORBInitializer.cpp
 src/interceptors/ClientInterceptor_impl.cpp
 src/interceptors/ORBInitializer_impl.cpp
 src/interceptors/ServerInterceptor_impl.cpp
 src/util/OpenSSL.cpp src/util/PrivateKey.cpp 
 src/util/PublicKey.cpp src/util/Ticket_impl.c
 /mico//mico /scs//scs /boost//headers /logger//logger
 core-idls /openssl//openssl
 : <threading>multi:<define>OPENBUS_SDK_MULTITHREAD
   <include>include
   <threading>multi:<source>/boost//thread
   <implicit-dependency>core-idls
 :
 : <threading>multi:<define>OPENBUS_SDK_MULTITHREAD
   <include>include
 ;
explicit openbus ;

install stage-libs : openbus : <location>stage ;

feature.feature core-idl-diff : off on : composite link-incompatible ;
mico-idl.cpp-h cpp-h-stub : [ alias cpp-h-stub-idl : $(openbus-idl-path)/access_control.idl
 $(openbus-idl-path)/core.idl $(openbus-idl-path)/credential.idl
 $(openbus-idl-path)/offer_registry.idl
 $(here)/legacy/idl/credential_v1_5.idl
 $(scs-idl-path)/scs.idl
 : : : <include>$(scs-idl-path)
 ]
 : <core-idl-diff>on
 ;
install stage-stubs : cpp-h-stub : <location>stage/stubs
 <install-dependencies>on <install-type>CPP <install-type>H
 <link>static <variant>release <threading>single
 ;
explicit stage-stubs ;
alias stage : stage-libs stage-stubs ;
explicit stage ;

install stage-tests : tests//tests : <location>stage-tests ;

feature.feature <openbus-stage-demo-name> : : free ;

rule stage-demos-location ( requirements * )
{
  local ps = [ new property-set $(requirements) ] ;
  local name = [ $(ps).get <openbus-stage-demo-name> ] ;
  return <location>stage-demos/$(name) ;
}

local all-demos = [ MATCH demo/(.*)/Jamfile : [ glob demo/*/Jamfile ] ] ;
for local d in $(all-demos)
{
  install stage-demo-$(d) : demo/$(d)//$(d) : <conditional>@stage-demos-location
   : <openbus-stage-demo-name>$(d) ;
  explicit stage-demo-$(d) ;
}
alias stage-demos : stage-demo-$(all-demos) : <conditional>@stage-demos-location ;
#explicit stage-demos ;

rule stage-interop-location ( requirements * )
{
  local ps = [ new property-set $(requirements) ] ;
  local name = [ $(ps).get <openbus-stage-demo-name> ] ;
  return <location>stage-interop/$(name) ;
}

local all-interops = [ MATCH interop/(.*)/Jamfile : [ glob interop/*/Jamfile ] ] ;
for local d in $(all-interops)
{
  install stage-interop-$(d) : interop/$(d)//$(d) : <conditional>@stage-interop-location
   : <openbus-stage-demo-name>$(d) ;
  explicit stage-interop-$(d) ;
}
alias stage-interops : stage-interop-$(all-interops) ;

rule stage-assistant-demos-location ( requirements * )
{
  local ps = [ new property-set $(requirements) ] ;
  local name = [ $(ps).get <openbus-stage-demo-name> ] ;
  return <location>stage-demos/assistant/$(name) ;
}

local all-assistant-demos = [ MATCH assistant/demo/(.*)/Jamfile : [ glob assistant/demo/*/Jamfile ] ] ;
for local d in $(all-assistant-demos)
{
  install stage-assistant-demo-$(d) : assistant/demo/$(d)//$(d) : <conditional>@stage-assistant-demos-location
   : <openbus-stage-demo-name>$(d)
  ;
  explicit stage-assistant-demo-$(d) ;
}
alias stage-assistant-demos : stage-assistant-demo-$(all-assistant-demos) ;
#explicit stage-assistant-demos ;

install stage-assistant : assistant//assistant : <location>stage ;
#explicit stage-assistant ;

install stage-assistant-tests : assistant/tests//tests
 : <location>stage-tests/assistant ;
#explicit stage-assistant-tests ;

alias assistant-doc-onehtml : assistant/doc//documentation-html/<location>assistant-doc
  assistant/doc//documentation-images/<location>assistant-doc
 : <format>onehtml ;
explicit assistant-doc-onehtml ;

alias assistant-doc : assistant-doc-onehtml ;
explicit assistant-doc ;

install stage-libs-deps : stage-demo-$(all-demos) stage-interop-$(all-interops)
 : <install-dependencies>on <install-type>SHARED_LIB <location>stage ;

alias run-tests : tests//run-tests ;
explicit run-tests ;
