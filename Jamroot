# -*- coding: iso-8859-1-unix -*-

import common ;
import os ;
import feature ;
import property-set ;
import "class" : new ;
import mico-idl ;
import version ;

path-constant here : . ;

mico-dbg-root-path = [ os.environ MICO_DBG_ROOT_PATH ] ;
if ! $(mico-dbg-root-path)
{
  mico-dbg-root-path = $(here)/../mico-mt-d ;
}

scs-idl-path = [ os.environ SCS_IDL_PATH ] ;
if ! $(scs-idl-path)
{
  scs-idl-path = $(here)/../scs-idl/src ;
}

openbus-idl-path = [ os.environ OPENBUS_IDL_PATH ] ;
if ! $(openbus-idl-path)
{
  openbus-idl-path = $(here)/../openbus-idl/src ;
}

using mico-idl
  : $(mico-dbg-root-path)/idl
    $(mico-dbg-root-path)/cpp
  : $(mico-dbg-root-path)/libs
  : stubs
;

# To add requirements for version >= or < than determinate version for specific toolset
rule version-less ( lhs rhs )
{
    return [ version.version-less
        [ SPLIT_BY_CHARACTERS $(lhs) : . ] :
        [ SPLIT_BY_CHARACTERS $(rhs) : . ] ] ;
}

rule add-conditions ( conditions + : toolset : min-version ? : max-version ? : properties * )
{
    local curr-toolset = [ MATCH <toolset>(.*) : $(properties) ] ;
    local curr-version = [ MATCH <toolset-$(curr-toolset):version>(.*) : $(properties) ] ;

    if $(curr-toolset) = $(toolset) &&
        ! ( $(min-version) && [ version-less $(curr-version) $(min-version) ] ) &&
        ! ( $(max-version) && [ version-less $(max-version) $(curr-version) ] )
    {
        return $(conditions) ;
    }
}

rule add-Wno-unused-local-typedefs-gcc>=4.8 ( properties * )
{
    return [ add-conditions <cxxflags>-Wno-unused-local-typedefs : gcc : 4.8 : : $(properties) ] ;
}

rule tag ( name : type ? : property-set )
{
  if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB EXE
  {
    local result ;
    local debug ;
    local static ;
    if <link>static in [ $(property-set).raw ]
    {
      static = -s ;
    }
    if <variant>debug in [ $(property-set).raw ]
    {
      debug = -d ;
    }
    if <threading>multi in [ $(property-set).raw ]
    {
      result = [ common.format-name <base> -mico
        -mt $(static) $(debug) : $(name) : $(type) : $(property-set) ] ;
    }
    else
    {
      result = [ common.format-name <base> -mico
        $(static) $(debug) : $(name) : $(type) : $(property-set) ] ;
    }
    return $(result) ;
  }
}

project openbus
  : requirements
    <tag>@tag
    <define>BOOST_ALL_NO_LIB=1
    <link>shared:<define>OPENBUS_SDK_SHARED
    <define>OPENBUS_SDK_SOURCE
    <conditional>@add-Wno-unused-local-typedefs-gcc>=4.8
  : usage-requirements
    <link>shared:<define>OPENBUS_SDK_SHARED
  : default-build
    <threading>multi
    <variant>debug
    <link>static
  ;

local rule core-idl-obj ( name : deps * )
{
  obj $(name).obj
    : $(openbus-idl-path)/$(name).idl
      # /scs//idls
    : <include>$(openbus-idl-path)
      <include>$(scs-idl-path)
      <implicit-dependency>/scs//idls
      <dependency>/scs//idls
      <dependency>$(deps)
    ;
  explicit $(name).obj ;
}

core-idl-obj core ;
core-idl-obj credential : core.obj ;
core-idl-obj access_control : core.obj credential.obj ;
core-idl-obj offer_registry : core.obj ;

obj credential_v1_5.obj
  : $(here)/legacy/idl/credential_v1_5.idl
    /scs//idls
  : <include>$(openbus-idl-path)
    <implicit-dependency>/scs//idls
  :
  ;
explicit credential_v1_5.obj ;

alias core-idls
  : access_control.obj
    core.obj
    credential.obj
    offer_registry.obj
    credential_v1_5.obj
  ;
explicit core-idls ;

lib openbus
  : [ glob-tree *.cpp *.c : bin demo tests stage assistant interop ]
    core-idls
    /mico//mico
    /scs//scs
    /boost//headers
    /logger//logger
    /openssl//openssl
  : <threading>multi:<define>OPENBUS_SDK_MULTITHREAD
    <include>include
    <threading>multi:<source>/boost//thread
    <dependency>core-idls
    <implicit-dependency>core-idls    
    <toolset>msvc:<source>/scs//idls
  :
  : <threading>multi:<define>OPENBUS_SDK_MULTITHREAD
    <include>include
  ;
explicit openbus ;

install stage-libs
  : openbus
  : <location>stage
  ;
explicit stage-libs ;

feature.feature core-idl-diff
  : off on
  : composite link-incompatible
  ;
  
mico-idl.cpp-h cpp-h-stub
  : [ alias cpp-h-stub-idl
      : $(openbus-idl-path)/access_control.idl
        $(openbus-idl-path)/core.idl
        $(openbus-idl-path)/credential.idl
        $(openbus-idl-path)/offer_registry.idl
        $(here)/legacy/idl/credential_v1_5.idl
        $(scs-idl-path)/scs.idl ]
  : <core-idl-diff>on
  ;
explicit cpp-h-stub ;

install stage-stubs
  : cpp-h-stub
  : <location>stage/stubs
    <install-dependencies>on
    <install-type>CPP
    <install-type>H
  ;
explicit stage-stubs ;

alias stage
  : stage-libs
    stage-stubs
  ;
explicit stage ;

install stage-tests : tests//tests : <location>stage-tests ;

feature.feature <openbus-stage-demo-name> : : free ;

rule stage-demos-location ( requirements * )
{
  local ps = [ new property-set $(requirements) ] ;
  local name = [ $(ps).get <openbus-stage-demo-name> ] ;
  return <location>stage-demos/$(name) ;
}

local all-demos = [ MATCH demo/(.*)/Jamfile : [ glob demo/*/Jamfile ] ] ;
for local d in $(all-demos)
{
  install stage-demo-$(d) : demo/$(d)//$(d) : <conditional>@stage-demos-location
   : <openbus-stage-demo-name>$(d) ;
  explicit stage-demo-$(d) ;
}
alias stage-demos : stage-demo-$(all-demos) : <conditional>@stage-demos-location ;
#explicit stage-demos ;

rule stage-interop-location ( requirements * )
{
  local ps = [ new property-set $(requirements) ] ;
  local name = [ $(ps).get <openbus-stage-demo-name> ] ;
  return <location>stage-interop/$(name) ;
}

local all-interops = [ MATCH interop/(.*)/Jamfile : [ glob interop/*/Jamfile ] ] ;
for local d in $(all-interops)
{
  install stage-interop-$(d) : interop/$(d)//$(d) : <conditional>@stage-interop-location
   : <openbus-stage-demo-name>$(d) ;
  explicit stage-interop-$(d) ;
}
alias stage-interops : stage-interop-$(all-interops) ;

rule stage-assistant-demos-location ( requirements * )
{
  local ps = [ new property-set $(requirements) ] ;
  local name = [ $(ps).get <openbus-stage-demo-name> ] ;
  return <location>stage-demos/assistant/$(name) ;
}

local all-assistant-demos = [ MATCH assistant/demo/(.*)/Jamfile : [ glob assistant/demo/*/Jamfile ] ] ;
for local d in $(all-assistant-demos)
{
  install stage-assistant-demo-$(d) : assistant/demo/$(d)//$(d) : <conditional>@stage-assistant-demos-location
   : <openbus-stage-demo-name>$(d)
  ;
  explicit stage-assistant-demo-$(d) ;
}
alias stage-assistant-demos : stage-assistant-demo-$(all-assistant-demos) ;
#explicit stage-assistant-demos ;

install stage-assistant : assistant//assistant : <location>stage ;
#explicit stage-assistant ;

install stage-assistant-tests : assistant/tests//tests
 : <location>stage-tests/assistant ;
#explicit stage-assistant-tests ;

alias assistant-doc-onehtml : assistant/doc//documentation-html/<location>assistant-doc
  assistant/doc//documentation-images/<location>assistant-doc
  assistant/doc//documentation-tests
 : <format>onehtml ;
explicit assistant-doc-onehtml ;

alias assistant-doc : assistant-doc-onehtml
 ;
explicit assistant-doc ;

install stage-libs-deps : stage-demo-$(all-demos) stage-interop-$(all-interops)
 : <install-dependencies>on <install-type>SHARED_LIB <location>stage ;

alias run-tests : tests//run-tests ;
explicit run-tests ;

alias assistant : assistant//assistant ;
explicit assistant ;

