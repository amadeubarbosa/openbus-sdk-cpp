
import common ;
import os ;
import string ;
import feature ;
import modules ;
import "class" : new ;
import property-set ;

local scs-idl-path-env = [ os.environ SCS_IDL_PATH ] ;
local scs-path-env = [ os.environ SCS_PATH ] ;
local openssl-lib-path-env = [ os.environ OPENSSL_LIB_PATH ] ;
local openssl-include-path-env = [ os.environ OPENSSL_INCLUDE_PATH ] ;
local logger-path-env = [ os.environ LOGGER_PATH ] ;
local openbus-idl-path-env = [ os.environ OPENBUS_IDL_PATH ] ;

path-constant scs-path : $(scs-path-env) ;
path-constant openssl-lib-path : $(openssl-lib-path-env) ;
path-constant openssl-include-path : $(openssl-include-path-env) ;
path-constant openbus-idl-path : $(openbus-idl-path-env) ;
path-constant scs-idl-path : $(scs-idl-path-env) ;

use-project scs : $(scs-path) ;
use-project logger : $(logger-path-env) ;

local search_path = [ modules.peek : BOOST_BUILD_PATH ] ;
search_path += $(scs-path) ;
modules.poke : BOOST_BUILD_PATH : $(search_path) ;

import mico-idl ;

project dl ;

lib dl : : <name>dl <link>shared ;

project openssl ;

lib crypto : : <name>crypto <search>$(openssl-lib-path)
 ;

lib openssl : crypto : <name>ssl <search>$(openssl-lib-path)
 : : <include>$(openssl-include-path)
 ;

project openbus : build-dir bin ;

path-constant here : . ;

local rule core-idl-obj ( name )
{
  obj $(name).obj : $(openbus-idl-path)/$(name).idl
    /scs//idls
   : <include>$(openbus-idl-path) <implicit-dependency>/scs//idls
   : : <include>$(openbus-idl-path)
  ;
  explicit $(name).obj ;
}

core-idl-obj access_control ;
core-idl-obj core ;
core-idl-obj credential ;
core-idl-obj offer_registry ;

obj credential_v1_5.obj : $(here)/legacy/idl/credential_v1_5.idl
 /scs//idls
 : <include>$(openbus-idl-path) <implicit-dependency>/scs//idls
 : : <include>$(openbus-idl-path)
 ;

alias core-idls : access_control.obj core.obj credential.obj
 offer_registry.obj credential_v1_5.obj ;

rule tag ( name : type ? : property-set )
{
  if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB
  {
    local result ;
    local debug ;
    if <variant>debug in [ $(property-set).raw ]
    {
      debug = -d ;
    }
    if <threading>multi in [ $(property-set).raw ]
    {
      result = [ common.format-name <base> -mico
        -mt $(debug) : $(name) : $(type) : $(property-set) ] ;
    }
    else
    {
      result = [ common.format-name <base> -mico
        $(debug) : $(name) : $(type) : $(property-set) ] ;
    }
    return $(result) ;
  }
}

lib openbus : src/Connection.cpp src/OpenBusContext.cpp
 src/Connection_impl.cpp src/ORBInitializer.cpp
 src/interceptors/ClientInterceptor_impl.cpp
 src/interceptors/ORBInitializer_impl.cpp
 src/interceptors/ServerInterceptor_impl.cpp
 src/util/OpenSSL.cpp src/util/Ticket_impl.c
 /mico//mico /scs//scs /boost//headers /logger//logger
 core-idls /openssl//openssl
 : <threading>multi:<define>OPENBUS_SDK_MULTITHREAD
   <include>include
   <threading>multi:<source>/boost//thread
   <implicit-dependency>core-idls
   <tag>@tag
 :
 : <threading>multi:<define>OPENBUS_SDK_MULTITHREAD
   <include>include
 ;
explicit openbus ;

install stage-libs : openbus : <location>stage ;
explicit stage-libs ;

feature.feature core-idl-diff : off on : composite link-incompatible ;
mico-idl.cpp-h cpp-h-stub : [ alias cpp-h-stub-idl : $(openbus-idl-path)/access_control.idl
 $(openbus-idl-path)/core.idl $(openbus-idl-path)/credential.idl
 $(openbus-idl-path)/offer_registry.idl
 $(here)/legacy/idl/credential_v1_5.idl
 $(scs-idl-path)/scs.idl
 : : : <include>$(scs-idl-path)
 ]
 : <core-idl-diff>on
 ;
install stage-stubs : cpp-h-stub : <location>stage/stubs
 <install-dependencies>on <install-type>CPP <install-type>H
 <link>static <variant>release <threading>single
 ;
explicit stage-stubs ;
alias stage : stage-libs stage-stubs ;
explicit stage ;

local rule exe-test ( test-name : filename : idl ? )
{
  local test-dependencies = openbus
   /mico//mico /scs//scs /boost//headers /logger//logger
   core-idls /openssl//openssl ;
  local test-requirements = <implicit-dependency>core-idls
    <threading>multi:<source>/boost//thread <include>tests
    <implicit-dependency>$(idl) <link>static:<source>dl ;
  exe $(test-name) : tests/$(filename) $(idl) $(test-dependencies)
   : $(test-requirements) ;
  explicit $(test-name) ;
}

exe-test connect_host_port_connect_to_right_host_and_port
 : connect/host_port/connect_to_right_host_and_port.cpp ;
exe-test connect_host_port_connect_to_wrong_host_and_port
 : connect/host_port/connect_to_wrong_host_and_port.cpp ;
# exe-test connect_host_port_connect_with_empty_host
#  : connect/host_port/connect_with_empty_host.cpp ;
#exe-test connect_orb_connect_getting_orb_with_ORB_init
# : connect/orb/connect_getting_orb_with_ORB_init.cpp ;
exe-test connect_orb_connect_getting_orb_with_createORB
 : connect/orb/connect_getting_orb_with_createORB.cpp ;

alias test-hello-idl : $(here)/tests/idl/hello.idl ;

exe-test connection_caller_chain_receive_call_with_default_connection_get_caller_chain
 : connection/caller_chain/receive_call_with_default_connection_get_caller_chain.cpp
 : test-hello-idl ;
exe-test connection_loginByCertificate_entity_id_and_file_private_key_ok
 : connection/loginByCertificate/entity_id_and_file_private_key_ok.cpp ;
exe-test connection_loginByPassword_after_logout
 : connection/loginByPassword/after_logout.cpp ;
exe-test connection_loginByPassword_entity_id_and_password_ok
 : connection/loginByPassword/entity_id_and_password_ok.cpp ;
exe-test connection_loginByPassword_login_when_already_logged
 : connection/loginByPassword/login_when_already_logged.cpp ;
exe-test connection_loginByPassword_wrong_password
 : connection/loginByPassword/wrong_password.cpp ;
exe-test connection_login_login_info_after_login
 : connection/login/login_info_after_login.cpp ;

exe-test connection_manager_calls_with_default_connection
 : connection_manager/calls_with_default_connection.cpp
 : test-hello-idl ;
exe-test connection_manager_calls_with_dispatcher
 : connection_manager/calls_with_dispatcher.cpp
 : test-hello-idl ;
exe-test connection_manager_calls_with_thread_requester
 : connection_manager/calls_with_thread_requester.cpp
 : test-hello-idl ;
exe-test connection_manager_create_connection_to_accessible_bus
 : connection_manager/create_connection_to_accessible_bus.cpp
 ;
exe-test connection_manager_create_connection_to_inaccessible_bus
 : connection_manager/create_connection_to_inaccessible_bus.cpp
 ;
exe-test connection_manager_create_connection_to_invalid_host
 : connection_manager/create_connection_to_invalid_host.cpp
 ;
exe-test connection_manager_get_manager
 : connection_manager/get_manager.cpp
 ;
exe-test connection_manager_receive_call_with_default_connection
 : connection_manager/receive_call_with_default_connection.cpp
 : test-hello-idl ;
exe-test fail_user_created_orb
 : fail_user_created_orb.cpp ;
exe-test get_offer
 : get_offer.cpp
 : test-hello-idl ;
exe-test register_service
 : register_service.cpp
 : test-hello-idl ;

feature.feature <openbus-stage-demo-name> : : free ;

local rule requirements-location-suffix ( requirements * )
{
  local mt = ;
  local dbg = ;
  if <threading>multi in $(requirements)
  {
    mt = -multi ;
  }
  else
  {
    mt = -single ;
  }
  if <variant>debug in $(requirements)
  {
    dbg = -debug ;
  }
  return $(mt)$(dbg) ;
}
rule stage-tests-location ( requirements * )
{
  local suffix = [ requirements-location-suffix $(requirements) ] ;
  return <location>stage-tests$(suffix) ;
}

install stage-tests : connect_host_port_connect_to_right_host_and_port
 connect_host_port_connect_to_wrong_host_and_port
 connect_orb_connect_getting_orb_with_createORB
 connection_caller_chain_receive_call_with_default_connection_get_caller_chain
 connection_loginByCertificate_entity_id_and_file_private_key_ok
 connection_loginByPassword_after_logout
 connection_loginByPassword_entity_id_and_password_ok
 connection_loginByPassword_login_when_already_logged
 connection_loginByPassword_wrong_password
 connection_login_login_info_after_login
 connection_manager_calls_with_default_connection
 connection_manager_calls_with_dispatcher
 connection_manager_calls_with_thread_requester
 connection_manager_create_connection_to_accessible_bus
 connection_manager_create_connection_to_inaccessible_bus
 connection_manager_create_connection_to_invalid_host
 connection_manager_get_manager
 connection_manager_receive_call_with_default_connection
 fail_user_created_orb
 get_offer
 register_service
 : <conditional>@stage-tests-location
 ;
explicit stage-tests ;

alias assistant-tmp : assistant//assistant ;
explicit assistant-tmp ;

rule stage-demos-location ( requirements * )
{
  local ps = [ new property-set $(requirements) ] ;
  local name = [ $(ps).get <openbus-stage-demo-name> ] ;
  local suffix = [ requirements-location-suffix $(requirements) ] ;
  return <location>stage-demos$(suffix)/$(name) ;
}

local all-demos = [ MATCH demo/(.*)/Jamfile : [ glob demo/*/Jamfile ] ] ;
for local d in $(all-demos)
{
  install stage-demo-$(d) : demo/$(d)//$(d) : <conditional>@stage-demos-location
   : <openbus-stage-demo-name>$(d) ;
  explicit stage-demo-$(d) ;
}
alias stage-demos : stage-demo-$(all-demos) : <conditional>@stage-demos-location ;
explicit stage-demos ;

rule stage-assistant-demos-location ( requirements * )
{
  local ps = [ new property-set $(requirements) ] ;
  local name = [ $(ps).get <openbus-stage-demo-name> ] ;
  local suffix = [ requirements-location-suffix $(requirements) ] ;
  return <location>stage-assistant-demos$(suffix)/$(name) ;
}

local all-assistant-demos = [ MATCH assistant/demo/(.*)/Jamfile : [ glob assistant/demo/*/Jamfile ] ] ;
for local d in $(all-assistant-demos)
{
  install stage-assistant-demo-$(d) : assistant/demo/$(d)//$(d) : <conditional>@stage-assistant-demos-location
   : <openbus-stage-demo-name>$(d)
  ;
  explicit stage-assistant-demo-$(d) ;
}
alias stage-assistant-demos : stage-assistant-$(all-assistant-demos) ;
explicit stage-assistant-demos ;

install stage-assistant : assistant//assistant ;
explicit stage-assistant ;

rule stage-assistant-tests-location ( requirements * )
{
  local suffix = [ requirements-location-suffix $(requirements) ] ;
  return <location>stage-assistant-tests$(suffix) ;
}
install stage-assistant-tests : assistant/tests//tests : <conditional>@stage-assistant-tests-location ;
explicit stage-assistant-tests ;

alias assistant-doc-onehtml : assistant/doc//documentation-html/<location>assistant-doc
  assistant/doc//documentation-images/<location>assistant-doc
 : <format>onehtml ;
explicit assistant-doc-onehtml ;

alias assistant-doc : assistant-doc-onehtml ;
