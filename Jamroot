# -*- coding: iso-8859-1-unix -*-

import common ;
import os ;
import feature ;
import property-set ;
import "class" : new ;
import version ;
import path ;
import modules ;

path-constant here : . ;

scs-root-path = [ os.environ SCS_ROOT_PATH ] ;
if ! $(scs-root-path)
{
  scs-root-path = ../scs ;
}

boost-root-path = [ os.environ BOOST_ROOT_PATH ] ;
if ! $(boost-root-path)
{
  boost-root-path = "../boost_1_51_0" ;
}

logger-root-path = [ os.environ LOGGER_ROOT_PATH ] ;
if ! $(logger-root-path)
{
  logger-root-path = "../logger" ;
}

local openssl-jam-path = [ os.environ OPENSSL_JAM_PATH ] ;
if ! $(openssl-jam-path)
{
  openssl-jam-path = "$(here)/../openssl.jam" ;
}
use-project openssl : $(openssl-jam-path) ; 

local ace_tao-jam-path = [ os.environ ACE_TAO_JAM_PATH ] ;
if ! $(ace_tao-jam-path)
{
  ace_tao-jam-path = "$(here)/../ace_tao.jam" ;
}
use-project TAO : $(ace_tao-jam-path) ; 

use-project boost : $(boost-root-path) ;
use-project scs : $(scs-root-path) ;
use-project logger : $(logger-root-path) ;

ace-root-path = [ os.environ ACE_ROOT_PATH ] ;
if ! $(ace-root-path)
{
  ace-root-path = $(here)/../../build/ACE_wrappers ;
}

taoidl-root-path = [ os.environ TAOIDL_ROOT_PATH ] ;
if ! $(taoidl-root-path)
{
  taoidl-root-path = $(here)/../../build/tao-bb-1.0 ;
}
modules.load tao-idl : : $(taoidl-root-path) ;
import tao-idl ;

rule tao-idl-init ( properties * )
{
  if <toolset>msvc in $(properties)
  {
    local msvc-bin-path ;
    if <toolset-msvc:version>12.0 in $(properties)
    {
      if <address-model>64 in $(properties)
      {
        msvc-bin-path = "C:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/bin" ;
      }
      else
      {
        msvc-bin-path = "C:/Program Files/Microsoft Visual Studio 12.0/VC/bin" ;
      }
    }
    if <toolset-msvc:version>9.0 in $(properties)
    {
      if <address-model>64 in $(properties)
      {
        msvc-bin-path = "C:/Program Files (x86)/Microsoft Visual Studio 9.0/VC/bin/amd64" ;
      }
      else
      {
        msvc-bin-path = "C:/Program Files/Microsoft Visual Studio 9.0/VC/bin" ;
      }
    }
    using tao-idl
      : $(ace-root-path)/bin
      : $(ace-root-path)/lib
      : $(msvc-bin-path)
      ;
  }
  else
  {
    using tao-idl
      : $(ace-root-path)/bin
      : $(ace-root-path)/lib
      ;
  }
    
}

scs-root-path = [ os.environ SCS_ROOT_PATH ] ;
if ! $(scs-root-path)
{
  scs-root-path = $(here)/../scs ;
}

scs-idl-path = [ os.environ SCS_IDL_PATH ] ;
if ! $(scs-idl-path)
{
  scs-idl-path = $(scs-root-path)/idl/src ;
}

openbus-idl-path = [ os.environ OPENBUS_IDL_PATH ] ;
if ! $(openbus-idl-path)
{
  openbus-idl-path = $(here)/idl/current ;
}

openbus-legacy-idl-path = [ os.environ OPENBUS_LEGACY_IDL_PATH ] ;
if ! $(openbus-legacy-idl-path)
{
  openbus-legacy-idl-path = $(here)/idl/legacy ;
}

# To add requirements for version >= or < than determinate version for specific toolset
rule version-less ( lhs rhs )
{
    return [ version.version-less
        [ SPLIT_BY_CHARACTERS $(lhs) : . ] :
        [ SPLIT_BY_CHARACTERS $(rhs) : . ] ] ;
}

rule add-conditions ( conditions + : toolset : min-version ? : max-version ? : properties * )
{
    local curr-toolset = [ MATCH <toolset>(.*) : $(properties) ] ;
    local curr-version = [ MATCH <toolset-$(curr-toolset):version>(.*) : $(properties) ] ;

    if $(curr-toolset) = $(toolset) &&
        ! ( $(min-version) && [ version-less $(curr-version) $(min-version) ] ) &&
        ! ( $(max-version) && [ version-less $(max-version) $(curr-version) ] )
    {
        return $(conditions) ;
    }
}

rule add-Wno-unused-local-typedefs-gcc>=4.8 ( properties * )
{
    return [ add-conditions <cxxflags>-Wno-unused-local-typedefs : gcc : 4.8 : : $(properties) ] ;
}

rule tag ( name : type ? : property-set )
{
  if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB EXE
  {
    local result ;
    local debug ;
    local static ;
    if <link>static in [ $(property-set).raw ]
    {
      static = -s ;
    }
    if <variant>debug in [ $(property-set).raw ]
    {
      debug = -d ;
    }
    if <threading>multi in [ $(property-set).raw ]
    {
      result = [ common.format-name <base> 
        -mt $(static) $(debug) : $(name) : $(type) : $(property-set) ] ;
    }
    else
    {
      result = [ common.format-name <base> 
        $(static) $(debug) : $(name) : $(type) : $(property-set) ] ;
    }
    return $(result) ;
  }
}

project dl ;

lib dl
  :
  : <link>shared
  ;

project openbus
  : requirements
    <tag>@tag
    <threading>multi
    <target-os>windows:<pch>off
    <target-os>windows,<link>shared:<runtime-link>shared
    <target-os>windows,<link>static:<runtime-link>static
    <target-os>windows:<debug-store>database
    <target-os>windows:<define>_SCL_SECURE_NO_WARNINGS
    <target-os>windows:<define>_CRT_SECURE_NO_WARNINGS
    <toolset>msvc-12.0:<cxxflags>/FS
    <toolset>msvc-12.0:<cflags>/FS
    <debug-symbols>on
    <define>BOOST_ALL_NO_LIB=1
    <link>shared:<define>OPENBUS_SDK_SHARED
    <define>OPENBUS_SDK_SOURCE
    <conditional>@add-Wno-unused-local-typedefs-gcc>=4.8
    <conditional>@tao-idl-init
    <library>/TAO//TAO
  : usage-requirements
    <link>shared:<define>OPENBUS_SDK_SHARED
    <toolset>msvc-12.0:<cxxflags>/FS
  : default-build
    <threading>multi
    <variant>debug
    <link>static
  ;

obj access_control-stub
  : $(openbus-idl-path)/src/openbus_access-2.1.idl
    core-stub
    credential-stub
  : <include>$(here)/idl
    <implicit-dependency>core-stub
    <implicit-dependency>credential-stub
  :
  : <implicit-dependency>core-stub
    <implicit-dependency>credential-stub
  ;
explicit access_control-stub ;

obj legacy_support-stub
  : $(openbus-idl-path)/src/openbus_legacy-2.1.idl
    access_control-stub
    access_control-legacy-stub
  : <include>$(openbus-idl-path)/src
    <include>$(openbus-legacy-idl-path)/src
    <implicit-dependency>access_control-stub
    <implicit-dependency>access_control-legacy-stub
  :
  : <implicit-dependency>access_control-stub
    <implicit-dependency>access_control-legacy-stub
  ;
explicit legacy_support-stub ;

obj offer_registry-stub
  : $(openbus-idl-path)/src/openbus_offers-2.1.idl
    access_control-stub
  : <implicit-dependency>/scs//idls
    <implicit-dependency>access_control-stub
    <include>$(openbus-idl-path)/src
  :
  : <implicit-dependency>/scs//idls
  ;
explicit offer_registry-stub ;

obj core-stub
  : $(openbus-idl-path)/src/openbus_core-2.1.idl
  : <include>$(openbus-idl-path)/src
  ;
explicit core-stub ;

obj credential-stub
  : $(openbus-idl-path)/src/openbus_creden-2.1.idl
    core-legacy-stub   
  : <implicit-dependency>core-legacy-stub
    <include>$(openbus-idl-path)/src
  :
  : <implicit-dependency>core-legacy-stub
  ;
explicit credential-stub ;

obj data_export-stub
  : $(openbus-idl-path)/src/openbus_export-2.1.idl
    access_control-legacy-stub  
  : <implicit-dependency>access_control-legacy-stub
    <include>$(openbus-idl-path)/src
  :
  : <implicit-dependency>access_control-legacy-stub
  ;
explicit data_export-stub ;

obj access_control-legacy-stub
  : $(openbus-legacy-idl-path)/src/access_control.idl
    core-legacy-stub
    credential-legacy-stub
  : <implicit-dependency>core-legacy-stub
    <implicit-dependency>credential-legacy-stub
  :
  : <implicit-dependency>core-legacy-stub
    <implicit-dependency>credential-legacy-stub
  ;
explicit access_control-legacy-stub ;

obj core-legacy-stub
  : $(openbus-legacy-idl-path)/src/core.idl
  ;
explicit core-legacy-stub ;

obj credential-legacy-stub
  : $(openbus-legacy-idl-path)/src/credential.idl
    core-legacy-stub
  : <implicit-dependency>core-legacy-stub
  :
  : <implicit-dependency>core-legacy-stub
  ;
explicit credential-legacy-stub ;

obj data_export-legacy-stub
  : $(openbus-legacy-idl-path)/src/data_export.idl
    access_control-legacy-stub
  : <implicit-dependency>access_control-legacy-stub
  :
  : <implicit-dependency>access_control-legacy-stub
  ;
explicit data_export-legacy-stub ;

obj offer_registry-legacy-stub
  : $(openbus-legacy-idl-path)/src/offer_registry.idl
  : <implicit-dependency>/scs//idls
    <include>$(openbus-legacy-idl-path)/src
  :
  : <implicit-dependency>/scs//idls
  ;
explicit offer_registry-legacy-stub ;

alias idls
  : access_control-stub
    legacy_support-stub
    offer_registry-stub
    core-stub
    credential-stub
    data_export-stub
    access_control-legacy-stub
    core-legacy-stub
    credential-legacy-stub
    data_export-legacy-stub
    offer_registry-legacy-stub
  : <warnings>off
  ;
explicit idls ;

lib openbus
  : [ glob-tree *.cpp *.c : bin demo tests install assistant interop ]
    /scs//scs
    /boost//headers
    /logger//logger
    /openssl//openssl
    idls
  : <include>include
    <threading>multi:<source>/boost//thread
    <dependency>idls
    <implicit-dependency>idls
    <toolset>msvc:<source>/scs//idls
  :
  : <include>include
    <dependency>idls
    <implicit-dependency>idls
  ;
explicit openbus ;

install stage
  : openbus
  : <location>install
  ;

tao-idl.cpp-h install-access_control_idl
  : $(openbus-idl-path)/src/openbus_access-2.1.idl
  ;
explicit install-access_control_idl ;

tao-idl.cpp-h install-legacy_support_idl
  : $(openbus-idl-path)/src/openbus_legacy-2.1.idl
  ;
explicit install-legacy_support_idl ;

tao-idl.cpp-h install-offer_registry_idl
  : $(openbus-idl-path)/src/openbus_offers-2.1.idl
  ;
explicit install-offer_registry_idl ;

tao-idl.cpp-h install-core_idl
  : $(openbus-idl-path)/src/openbus_core-2.1.idl
  ;
explicit install-core_idl ;

tao-idl.cpp-h install-credential_idl
  : $(openbus-idl-path)/src/openbus_creden-2.1.idl
  ;
explicit install-credential_idl ;

tao-idl.cpp-h install-data_export_idl
  : $(openbus-idl-path)/src/openbus_export-2.1.idl
  ;
explicit install-data_export_idl ;

tao-idl.cpp-h install-access_control-legacy_idl
  : $(openbus-legacy-idl-path)/src/access_control.idl
  ;
explicit install-access_control-legacy_idl ;

tao-idl.cpp-h install-core-legacy_idl
  : $(openbus-legacy-idl-path)/src/core.idl
  ;
explicit install-core-legacy_idl ;

tao-idl.cpp-h install-credential-legacy_idl
  : $(openbus-legacy-idl-path)/src/credential.idl
  ;
explicit install-credential-legacy_idl ;

tao-idl.cpp-h install-data_export-legacy_idl
  : $(openbus-legacy-idl-path)/src/data_export.idl
  ;
explicit install-data_export-legacy_idl ;

tao-idl.cpp-h install-offer_registry-legacy_idl
  : $(openbus-legacy-idl-path)/src/offer_registry.idl
  ;
explicit install-offer_registry-legacy_idl ;

tao-idl.cpp-h install-scs_idl
  : $(scs-idl-path)/scs.idl
  ;
explicit install-scs_idl ;

install stage-stubs
  : install-access_control_idl
    install-legacy_support_idl
    install-core_idl
    install-offer_registry_idl
    install-core_idl
    install-credential_idl
    install-data_export_idl
    install-access_control-legacy_idl
    install-core-legacy_idl
    install-credential-legacy_idl
    install-data_export-legacy_idl
    install-offer_registry-legacy_idl
  : <location>install/stubs
    <install-dependencies>on
    <install-type>CPP
    <install-type>H
  ;
explicit stage-stubs ;

install stage-tests : tests//tests : <location>stage-tests ;
explicit stage-tests ;

feature.feature <openbus-stage-demo-name> : : free ;

rule stage-demos-location ( requirements * )
{
  local ps = [ new property-set $(requirements) ] ;
  local name = [ $(ps).get <openbus-stage-demo-name> ] ;
  return <location>stage-demos/$(name) ;
}

local all-demos = [ MATCH demo/(.*)/Jamfile : [ glob demo/*/Jamfile ] ] ;
for local d in $(all-demos)
{
  install stage-demo-$(d)
    : demo/$(d)//$(d)
    : <conditional>@stage-demos-location
    : <openbus-stage-demo-name>$(d)
  ;
  explicit stage-demo-$(d) ;
}
alias stage-demos
  : stage-demo-$(all-demos)
  : <conditional>@stage-demos-location
  ;
explicit stage-demos ;

rule stage-interop-location ( requirements * )
{
  local ps = [ new property-set $(requirements) ] ;
  local name = [ $(ps).get <openbus-stage-demo-name> ] ;
  return <location>stage-interop/$(name) ;
}

local all-interops = [ MATCH interop/(.*)/Jamfile : [ glob interop/*/Jamfile ] ] ;
for local d in $(all-interops)
{
  install stage-interop-$(d)
    : interop/$(d)//$(d)
    : <conditional>@stage-interop-location
    : <openbus-stage-demo-name>$(d)
    ;
  explicit stage-interop-$(d) ;
}
alias stage-interops : stage-interop-$(all-interops) ;
explicit stage-interops ;

install stage-deps
  : openbus
    /boost//program_options
    /boost//date_time
    /boost//filesystem
    /boost//regex
  : <location>install/deps
    <install-dependencies>on
    <install-type>LIB
    <install-type>PDB
  ;
explicit stage-deps ;

alias run-tests : tests//run-tests ;
explicit run-tests ;

