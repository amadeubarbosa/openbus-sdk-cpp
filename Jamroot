
import common ;
import os ;
import string ;
import feature ;
import modules ;

local scs-path-env = [ os.environ SCS_PATH ] ;
local openssl-lib-path-env = [ os.environ OPENSSL_LIB_PATH ] ;
local openssl-include-path-env = [ os.environ OPENSSL_INCLUDE_PATH ] ;
local logger-path-env = [ os.environ LOGGER_PATH ] ;
local openbus-idl-path-env = [ os.environ OPENBUS_IDL_PATH ] ;

path-constant scs-path : $(scs-path-env) ;
path-constant openssl-lib-path : $(openssl-lib-path-env) ;
path-constant openssl-include-path : $(openssl-include-path-env) ;
path-constant openbus-idl-path : $(openbus-idl-path-env) ;

use-project scs : $(scs-path) ;
use-project logger : $(logger-path-env) ;

local search_path = [ modules.peek : BOOST_BUILD_PATH ] ;
search_path += $(scs-path) ;
modules.poke : BOOST_BUILD_PATH : $(search_path) ;

import mico-idl ;

project openssl ;

lib crypto : : <name>crypto <search>$(openssl-lib-path)
 ;

lib openssl : crypto : <name>ssl <search>$(openssl-lib-path)
 : : <include>$(openssl-include-path)
 ;

project openbus ;

path-constant here : . ;

alias core-idls : $(openbus-idl-path)/access_control.idl
 $(openbus-idl-path)/core.idl
 $(openbus-idl-path)/credential.idl
 $(openbus-idl-path)/offer_registry.idl
 $(here)/legacy/idl/credential_v1_5.idl
 /scs//idls
 : <include>$(openbus-idl-path)
 : : <include>$(openbus-idl-path)
 ;
explicit core-idls ;

rule tag ( name : type ? : property-set )
{
  if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB
  {
    local result ;
    local debug ;
    if <variant>debug in [ $(property-set).raw ]
    {
      debug = -debug ;
    }
    if <threading>multi in [ $(property-set).raw ]
    {
      result = [ common.format-name <base> -mico
        multithread $(debug) : $(name) : $(type) : $(property-set) ] ;
    }
    else
    {
      result = [ common.format-name <base> -mico
        singlethread $(debug) : $(name) : $(type) : $(property-set) ] ;
    }
    return $(result) ;
  }
}

lib openbus : src/Connection.cpp src/ConnectionManager.cpp
 src/Connection_impl.cpp src/ORBInitializer.cpp
 src/interceptors/ClientInterceptor_impl.cpp
 src/interceptors/ORBInitializer_impl.cpp
 src/interceptors/ServerInterceptor_impl.cpp
 src/util/OpenSSL.cpp src/util/Ticket_impl.c
 /mico//mico /scs//scs /boost//headers /logger//logger
 core-idls /openssl//openssl
 : <threading>multi:<define>OPENBUS_SDK_MULTITHREAD
   <include>include
   <threading>multi:<source>/boost//thread
   <implicit-dependency>core-idls
   <tag>@tag
 :
 : <threading>multi:<define>OPENBUS_SDK_MULTITHREAD
   <include>include
 ;
explicit openbus ;

install stage-libs : openbus : <location>stage ;
explicit stage-libs ;

feature.feature core-idl-dummy-feature : one two three : link-incompatible ;
mico-idl.cpp-h cpp-h-stub : core-idls : <core-idl-dummy-feature>two ;
install stage-stubs : cpp-h-stub : <location>stage/stubs <install-dependencies>on <install-type>CPP <install-type>H
 <link>static
 ;
explicit stage-stubs ;
alias stage : stage-libs stage-stubs ;
explicit stage ;

local rule exe-test ( test-name : filename : idl ? )
{
  local test-dependencies = openbus
   /mico//mico /scs//scs /boost//headers /logger//logger
   core-idls /openssl//openssl ;
  local test-requirements = <implicit-dependency>core-idls
    <core-idl-dummy-feature>three
    <threading>multi:<source>/boost//thread <include>tests
    <implicit-dependency>$(idl) ;
  exe $(test-name) : tests/$(filename) $(idl) $(test-dependencies)
   : $(test-requirements) ;
  explicit $(test-name) ;
}

exe-test connect_host_port_connect_to_right_host_and_port
 : connect/host_port/connect_to_right_host_and_port.cpp ;
exe-test connect_host_port_connect_to_wrong_host_and_port
 : connect/host_port/connect_to_wrong_host_and_port.cpp ;
# exe-test connect_host_port_connect_with_empty_host
#  : connect/host_port/connect_with_empty_host.cpp ;
#exe-test connect_orb_connect_getting_orb_with_ORB_init
# : connect/orb/connect_getting_orb_with_ORB_init.cpp ;
exe-test connect_orb_connect_getting_orb_with_createORB
 : connect/orb/connect_getting_orb_with_createORB.cpp ;

alias test-hello-idl : $(here)/tests/idl/hello.idl ;

exe-test connection_caller_chain_receive_call_with_default_connection_get_caller_chain
 : connection/caller_chain/receive_call_with_default_connection_get_caller_chain.cpp
 : test-hello-idl ;
exe-test connection_loginByCertificate_entity_id_and_file_private_key_ok
 : connection/loginByCertificate/entity_id_and_file_private_key_ok.cpp ;
exe-test connection_loginByPassword_after_logout
 : connection/loginByPassword/after_logout.cpp ;
exe-test connection_loginByPassword_entity_id_and_password_ok
 : connection/loginByPassword/entity_id_and_password_ok.cpp ;
exe-test connection_loginByPassword_login_when_already_logged
 : connection/loginByPassword/login_when_already_logged.cpp ;
exe-test connection_loginByPassword_wrong_password
 : connection/loginByPassword/wrong_password.cpp ;
exe-test connection_login_login_info_after_login
 : connection/login/login_info_after_login.cpp ;

exe-test connection_manager_calls_with_default_connection
 : connection_manager/calls_with_default_connection.cpp
 : test-hello-idl ;
exe-test connection_manager_calls_with_dispatcher
 : connection_manager/calls_with_dispatcher.cpp
 : test-hello-idl ;
exe-test connection_manager_calls_with_thread_requester
 : connection_manager/calls_with_thread_requester.cpp
 : test-hello-idl ;
exe-test connection_manager_create_connection_to_accessible_bus
 : connection_manager/create_connection_to_accessible_bus.cpp
 ;
exe-test connection_manager_create_connection_to_inaccessible_bus
 : connection_manager/create_connection_to_inaccessible_bus.cpp
 ;
exe-test connection_manager_create_connection_to_invalid_host
 : connection_manager/create_connection_to_invalid_host.cpp
 ;
exe-test connection_manager_get_manager
 : connection_manager/get_manager.cpp
 ;
exe-test connection_manager_receive_call_with_default_connection
 : connection_manager/receive_call_with_default_connection.cpp
 : test-hello-idl ;
exe-test fail_user_created_orb
 : fail_user_created_orb.cpp ;
exe-test get_offer
 : get_offer.cpp
 : test-hello-idl ;
exe-test register_service
 : register_service.cpp
 : test-hello-idl ;

install stage-tests : connect_host_port_connect_to_right_host_and_port
 connect_host_port_connect_to_wrong_host_and_port
 connect_orb_connect_getting_orb_with_createORB
 connection_caller_chain_receive_call_with_default_connection_get_caller_chain
 connection_loginByCertificate_entity_id_and_file_private_key_ok
 connection_loginByPassword_after_logout
 connection_loginByPassword_entity_id_and_password_ok
 connection_loginByPassword_login_when_already_logged
 connection_loginByPassword_wrong_password
 connection_login_login_info_after_login
 connection_manager_calls_with_default_connection
 connection_manager_calls_with_dispatcher
 connection_manager_calls_with_thread_requester
 connection_manager_create_connection_to_accessible_bus
 connection_manager_create_connection_to_inaccessible_bus
 connection_manager_create_connection_to_invalid_host
 connection_manager_get_manager
 connection_manager_receive_call_with_default_connection
 fail_user_created_orb
 get_offer
 register_service
 ;
explicit stage-tests ;
