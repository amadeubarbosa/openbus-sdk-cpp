Openbus SDK C++ - Demos - README

[1] Demo HELLO

  [1.1] Descrição
    Demo composta de um servidor que disponibiliza um serviço do tipo Hello, 
  que exibe uma mensagem na tela informando o usuário que fez a chamada, e ,
  de um cliente que faz uma única requisição ao serviço em questão.
    Disponível para Mico e Orbix.
  
  [1.2] Localização
  $OPENBUS_HOME/demo/hello/mico
  $OPENBUS_HOME/demo/hello/orbix

[2] Demo DELEGATE

  [2.1] Descrição
    Demo que exercita o mecanismo de delegação de uma credencial. Um servidor
  disponibiliza um serviço do tipo Hello, que  exibe  uma  mensagem  na  tela 
  informando a credencial do usuário que fez a  chamada, e, de um cliente que 
  faz duas requisições ao serviço em questão com  credenciais distintas  pelo 
  campo de delegação.
    Versões multithread e singlethread para Mico e singlethread para Orbix.

  [2.2] Localização
  $OPENBUS_HOME/delegate/multithread/mico
  $OPENBUS_HOME/delegate/singlethread/mico
  $OPENBUS_HOME/delegate/singlethread/orbix

[4] Como compilar
  [4.1] Edite o arquivo Makefile e se necessário ative ou desative as seguintes
    macros: 
    [4.1.1] MICO_64: Para compilação em máquinas de 64bits.
    [4.1.2] MULTITHREAD: Uso da versão multithread.  !Atenção!     O ativamente  
      desta opção requer o uso de Mico compilado para multithread.
    [4.1.3] PTHREAD: Torna explícito o uso da  lib  pthread  em  caso  de  modo 
      multithread. Alguns sistemas como MacOSX não requerem esta opção.
  [4.2] Certifique-se   de   ter definido a variável OPENBUS_HOME   e   de  ter 
    carregado os scripts de configuração do Mico ou Orbix.
    (para maiores informações ler o tutorial Openbus SDK C++)
  [4.3] Execute o make:
    $make

[3] Como executar
  [3.1] Edite o arquivo 'democonfig' e faça as devidas configurações   conforme
    o seu ambiente. Por exemplo:  o  nome  do  usuário  que  terá    acesso  ao 
    barramento e a localização do barramento.
    [3.1.2] Defina o par certificado/chave privada  a  ser   utilizado     pelo 
      processo servidor. Informações de como gerar o   certificado  podem   ser 
      obtidas em:
      https://jira.tecgraf.puc-rio.br/confluence/display/ESDPUB/
        Geracao+de+Chaves+e+Certificados+Digitais
    [3.1.3] Disponibilize a chave privada gerada acima no diretório corrente da 
      demo. Como também o certificado do serviço de controle de acesso (ACS).
      Este pode ser obtido com o administrador do barramento.
      Sendo assim, o diretório corrente da demo deve ser alimentado com dois 
      arquivos, como por exemplo: 
        HelloService.key: Chave privada gerada acima.
        AccessControlService.crt: Certificado    do    ACS   obtido   junto  ao 
          administrador do barramento.
    [3.1.4] Entregue ao administrador a sua chave pública(certificado) para que 
      ele possa cadastrá-la no barramento.
  [3.2] Certifique-se   de   ter definido a variável OPENBUS_HOME   e   de  ter 
    carregado os scripts de configuração do Mico ou Orbix.
    (para maiores informações ver tutorial Openbus SDK C++)
  [3.3] Inicie o processo servidor através do script 'runserver':
    $./runserver
  [3.4] Inicie o processo cliente através do script 'runclient':
    $./runclient
  