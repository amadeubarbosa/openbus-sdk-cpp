
import option ;
import ob-tests : run-coop-test run-fail run ;
using ob-tests ;

path-constant here : . ;

project openbus/tests ;

local test-deps =
  /openbus//openbus
  /scs//scs
  /boost//headers
  /logger//logger
  /openssl//openssl
  /TAO//TAO
  ;
local test-requirements =
  <threading>multi:<source>/boost//thread 
  <target-os>windows:<library>/openbus//idls
  <target-os>windows:<library>/scs//scs-stub
  <target-os>linux,<link>static:<source>/dl//dl
  <include>.
  <define>OPENBUS_SDK_TEST #Dangerous!
  <library>/openbus//openbus
  <library>/scs//scs
  <library>/boost//headers
  <library>/logger//logger
  <library>/openssl//openssl
  <library>/TAO//TAO
  ;

obj test-hello-stub
  : $(here)/idl/hello.idl
  ;
explicit test-hello-stub ;

obj test-hello-skeleton
  : $(here)/idl/hello.idl
  : <generate>skeleton
  ;
explicit test-hello-skeleton ;

alias run-tests
  : [ run connect/host_port/connect_to_right_host_and_port.cpp : : : $(test-requirements) ]
    [ run connect/orb/connect_getting_orb_with_createORB.cpp : : : $(test-requirements) ]
    [ run connection/caller_chain/enc_and_dec_chain_AB.cpp : : : $(test-requirements) ]
    [ run connection/caller_chain/enc_and_dec_chain_ABC.cpp : : : $(test-requirements) ]
    [ run connection/caller_chain/enc_and_dec_legacy_chain_AB.cpp : : : $(test-requirements) ]
    [ run connection/caller_chain/enc_and_dec_legacy_chain_ABC.cpp : : : $(test-requirements) ]
    [ run connection/caller_chain/dec_incompat_version_chain.cpp : : : $(test-requirements) ]
    [ run connection/caller_chain/dec_incompat_type_chain.cpp : : : $(test-requirements) ]
    [ run connection/caller_chain/make_chain_for_invalid_login.cpp : : : $(test-requirements) ]
    [ run connection/caller_chain/make_chain_for_valid_login.cpp : : : $(test-requirements) ]
    [ run connection/caller_chain/make_chain_for_joined_chain.cpp : : : $(test-requirements) ]
    [ run connection/loginBySharedAuth/login.cpp : : admin/TestCppHello.key : $(test-requirements) ]
    [ run connection/loginBySharedAuth/try_login_after_cancel.cpp : : admin/TestCppHello.key : $(test-requirements) ]
    [ run connection/loginBySharedAuth/enc_and_dec_secret.cpp : : admin/TestCppHello.key : $(test-requirements) ]
    [ run connection/loginByCertificate/entity_pkey_ok.cpp : : admin/TestCppHello.key : $(test-requirements) ]
    [ run connection/loginByPassword/after_logout.cpp : : : $(test-requirements) ]
    [ run connection/loginByPassword/entity_id_and_password_ok.cpp : : : $(test-requirements) ]
    [ run connection/loginByPassword/login_when_already_logged.cpp : : : $(test-requirements) ]
    [ run connection/loginByPassword/wrong_password.cpp : : : $(test-requirements) ]
    [ run connection/loginByPassword/on_invalid_login.cpp : : : $(test-requirements) ]
    [ run connection/loginByPassword/logout_on_invalid_login.cpp : : : $(test-requirements) ]
    [ run connection/login/login_info_after_login.cpp : : : $(test-requirements) ]
    [ run connection_manager/create_connection_to_accessible_bus.cpp : : : $(test-requirements) ]
    [ run connection_manager/conn_inaccessible_bus.cpp : : : $(test-requirements) ]
    [ run connection_manager/create_connection_to_invalid_host.cpp : : : $(test-requirements) ]
    [ run connection_manager/get_manager.cpp : : : $(test-requirements) ]
    [ run fail_user_created_orb.cpp : : : $(test-requirements) ]
    [ run connection_manager/rcv_call_def_conn.cpp : :
      : $(test-requirements)
        <library>test-hello-stub
    	<library>test-hello-skeleton
    	<dependency>test-hello-skeleton
    	<implicit-dependency>test-hello-skeleton ]
    [ run get_offer.cpp : :
      : $(test-requirements)
        <library>test-hello-stub
    	<library>test-hello-skeleton
    	<dependency>test-hello-skeleton
    	<implicit-dependency>test-hello-skeleton ]
  ;
explicit run-tests ;
